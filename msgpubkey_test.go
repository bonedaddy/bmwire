// Copyright (c) 2013-2015 Conformal Systems LLC.
// Use of this source code is governed by an ISC
// license that can be found in the LICENSE file.

package bmwire_test

import (
	"testing"
	"time"

	//	"github.com/davecgh/go-spew/spew"
	"github.com/jimmysong/bmwire"
)

// TestPubKey tests the MsgPubKey API.
func TestPubKey(t *testing.T) {

	pver := bmwire.ProtocolVersion

	// Ensure the command is expected value.
	wantCmd := "object"
	now := time.Now()
	var ripe [20]byte
	var tag [32]byte
	msg := bmwire.NewMsgGetPubKey(83928, now, 2, 1, ripe, tag)
	if cmd := msg.Command(); cmd != wantCmd {
		t.Errorf("NewMsgGetPubKey: wrong command - got %v want %v",
			cmd, wantCmd)
	}

	// Ensure max payload is expected value for latest protocol version.
	// Num objectentory vectors (varInt) + max allowed objectentory vectors.
	wantPayload := uint32(68)
	maxPayload := msg.MaxPayloadLength(pver)
	if maxPayload != wantPayload {
		t.Errorf("MaxPayloadLength: wrong max payload length for "+
			"protocol version %d - got %v, want %v", pver,
			maxPayload, wantPayload)
	}

	return

}

// TestPubKeyWire tests the MsgPubKey bmwire.encode and decode for various numbers
// of objectentory vectors and protocol versions.
func TestPubKeyWire(t *testing.T) {
}

// TestPubKeyWireError tests the MsgPubKey error paths
func TestPubKeyWireError(t *testing.T) {
}

// basePubKey is used in the various tests as a baseline MsgPubKey.
var basePubKey = &bmwire.MsgPubKey{
	Nonce:        123123,                   // 0x1e0f3
	ExpiresTime:  time.Unix(0x495fab29, 0), // 2009-01-03 12:15:05 -0600 CST)
	ObjectType:   bmwire.ObjectTypePubKey,
	Version:      2,
	StreamNumber: 1,
	Behavior:     0,
	SigningKey:   [64]byte{},
	EncryptKey:   [64]byte{},
}

// basePubKeyEncoded is the bmwire.encoded bytes for basePubKey
// using version 2 (pre-tag)
var basePubKeyEncoded = []byte{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0xf3, // Nonce
	0x00, 0x00, 0x00, 0x00, 0x49, 0x5f, 0xab, 0x29, // 64-bit Timestamp
	0x01, 0x00, 0x00, 0x00, // Object Type
	0x02,                   // Version
	0x01,                   // Stream Number
	0x00, 0x00, 0x00, 0x00, // Behavior
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Signing Key
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Encrypt Key
}
